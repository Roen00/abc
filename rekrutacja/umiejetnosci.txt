Web development jest dosyć szeroką dziedziną. Rozmowa techniczna będzie miała za zadanie stwierdzenie, czy twój stan wiedzy jest wystarczająco dobry z głównych technologii, oraz na ile szeroką wiedzę posiadasz z pozostałych elementów. Zatem rekrutując się na junior developera prawdopodobnie firma będzie od ciebie wymagać co najmniej dobrej znajomości języka lub/i frameworka (np. Java + Spring), oraz co najmniej podstaw z innych technologii, zagadnień.

I. Główny język, framework i środowisko
  - warto skupić się przede wszystkim właśnie na tych kluczowych technologiach.
  - opanowanie składni języka - swobodne czytanie kodu, umiejętność tworzenia klas, dziedziczenia itp
  - opanowanie frameworka języka - często frameworki są bardzo rozbudowane, i nawet doświadczeni programiści nie znają na pamięć wszystkich metod, funkcji. Nie mniej jednak tworząc aplikację w tym frameworku powinniśmy zaznajomić się z najczęściej używanymi składnikami.
  - znajomość systemu paczek/bibliotek: instalowanie, usuwanie paczeki i ich aktualizacja.
  - rozumienie logów serwera/aplikacji: interpretacja komunikatów błędów, logów aktywności serwera
  - debugging - podstawowe, prymitywne debuggowanie kodu (wyświetlanie wartości zmiennych np. w logach; wywoływanie wyjątków, żeby sprawdzić w jakie części kodu są uruchamiane). Bardziej zaawansowane, przy użyciu debuggera - programu który zatrzyma wykonywanie kodu, pozwala na poruszanie się po kodzie krok po kroku, umożliwia wyświetlenie zmiennych, wykonywanie na nich operacji itp.

II. Przeglądarka internetowa
  - interpretacja komunikatów ostrzeżeń, błędów JavaScriptu
  - poruszanie się po drzewie elementów DOM; usuwanie, dodawanie znaczyników, aktrybutów itp. bezpośrednio z panelu narzędzi developerskich przeglądarki (np. w Chrome zakładka 'Elements')
  - przeładowanie strony bez użycia cache przeglądarki (Ctrl+Shift+R), lub po uprzednim otwarciu panelu konsoli developerskiej przytrzymanie wciśniętego przycisku przeładowania strony (po lewej stronie paska adresu)
  - debugowanie kodu JS: przez użycie słowa 'debugger' w kodzie; za pomocą ustawiania breakpointów
  - analiza requestów sieciowych podczas działania aplikacji (w Chrome zakładka: Network)
  - (*) analiza profilingu (w Chrome zakładka timeline)

III. Stack sieciowy
  - znajomość protokołów HTTP (metody GET, POST itp., jak wygląda request HTTP, odpowiedź HTTP ). Co nowego wprowadza HTTP/2 w porównaniu do HTTP 1.1? Model OSI; protokół TCP i model TCP/IP.
  - REST, metody HTTP (GET, POST itp.)

IV. Narzędzia (programy)
  - cURL: umiejętność wykonywania żądań do serwera (GET, POST); dodawanie parametrów do requestu, ustawianie nagłówków
