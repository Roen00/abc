Słowniczek

produkcja - serwer produkcyjny; jest to środowisko, przeznaczone dla odbiorców końcowych (klientów, użytkowników). ; zob. dev, stage, UAT
senior (senior developer) - jest to programista, który wyróżnia się umiejętnościami, stażem pracy, doświadczeniem od reszty developerów; zob. developer, juniior developer. Jest on odpowiedzialny za pieczę nad projektem (wieloma projektami). Zwykle od niego zależą najważniejsze decycje, typu modyfikacja architektury aplikacji, wprowadzenie do niej kolejnej technologii/framweorka. Często mentor, do którego szeregowi programiści, juniorzy a nawet inni seniorzy zwracają się z problemem, albo o poradę. Osoba, która również może wykonywać
- junior
UAT (User Acceptancy Test, spolszcz. łat) - wykonywanie przez wyznaczone osoby (tester, klient, sam developer).
stage (staging) server - serwer, który służy 
dev (development) server - środowisko, zob. stage, uat, produkcja
web - wersja strony dla komputerów, dostepna przez zwykłą przeglądarkę. 'Zobaczyć coś na webie' - otworzyć stronę aplikcji w przeglądarce.
product manager, PM - osoba zajmująca się projektem od strony zarządzania nim. Komunikuje się z zespołem programistów, kładąc nacisk tworzenie napilniejszych/najpotrzebniejszych ficzerów. Jest pośrednikiem między klientem a programistami, dzięki czemu developerzy mogą zajmować się programowaniem. Zajmuje się ustaleniem tego, co będzie robione w nabliżyszej przyszłości, zgodnie z potrzebami klienta a jednocześnie uwzględniając w pewnym stopniu preferencje developerów (np. może wynegocjować odsunięcie taska, którego wykonanie byłoby bardzo trudne i poza kompetencjami developera).
HR (kadry, ejdżar, ang. Human Resources) - jest to sekcja w firmie (i osoby w niej pracujące), które zajmują się wyszukiwaniem i pozyskiwaniem nowych pracowników dla firmy. Przeglądają nadesłane CV, wybierają odpowiednie osoby. Zwykle przeprowadzają
task
ficzer (ang. feature) -
bug (spolszcz. bag) - błąd w działaniu aplikacji, objawiający się uzyskaniem nieporządanym spadkiem wydajności, zwracaniem niepoprawych wyników, czy nawet zawieszeniem się (zcrashowaniem) całej aplikacji.
edge case - skrajny przypadek - jest to sytuacja, która polega na tym, że użytkownik wprowadzi dane, które nie przewidział developer, wykona on czynności na stronie inaczej niż założono (lub nie wykona jakiegoś kroku) lub np. programista nie przewidział, że dla pewnych typów danych dana biblioteka będzie powodować błędy.
crash - zatrzymanie się aplikacji, spowodowane błędem
request - żądanie - jest to odpytywanie zasobów, często dostając odpowiedź, która zawiera informację nt. pomyślności wykonania tego requestu. Przykładowo, wchodząc na jakąś stronę przeglądarka wykonywanuje zwykle wiele requestów. Pobranie zawartości strony internetowej wiąże się z wykonywaniem osobnych requestów do pobrania kodu HTML, plików stylów CSS, plików Javascriptu, obrazków). W celu zmniejszenia ilości requestów dla środowiska produkcyjnego, wykonuje się minifikację i konkatenację plików JS i CSS (nie HTML!), oraz sprity obrazków.
qa - qualiy assurance (zapewnienie jakości), wym. 'kju-ej' - dział/zawód zajmujący się szeroko pojętym testowaniem aplikacji w celu minimalizacji ilości błędów jakich mogliby doświdczyć uzytkownicy. Osoba QA pisze testy automatyczne (kod testów), lub 'przeklikuje' stronę podobnie jak zwykły uzytkownik, i stara się wyłapać wszelkie niedociągnięcia (graficzne, UXowe, w logice działania). Błędy raportowane są do developera, który powinien je poprawić.
CI
UX
usability

sprite - jest to pojedynczy plik graficzny, który składa się z 'posklejanych' wielu mniejszych obrazków. Używa się go po to, żeby zmninimalizować ilość requestów (zob.) do serwera - mając 20 małych obrazków złączonych w 1 spricie nie wykonujemy 20 osobnych requestów do serwera (co wiąże się z dodatkowym narzutem czasowym dla użytkownika, jak i narzutem obsługi większej ilości żądań dla serwera), ale przesyłamy je do przeglądarki jako odpowiedź na pojedynczy request. W kodzie CSS podajemy możemy dokładne współrzędne na podstawie których wyciągamy tylko taki fragment sprita, który jest akurat potrzeby do wyświetlenia (np. obazek przycisku). Użycie sprite jest sensowne, gdy mamy dużą ilość bardzo małych obrazków. Standardowym przykładem jest sprite z przyciskami, elementami obramowania.

maintanance - utrzymywanie - jest to etap w cyklu życia aplikacji, w którym nie dodaje się aktywnie (regularnie, często) nowych ficzerów, jedynie dogląda się go. Monitorujemy czy apka działa, poprawiamy okazjonalnie bugi, ewentualnie raz na jakiś czas wykonujemy drobne zadania dodające coś do funkcjonalności. Tak można określić działającą aplikację (korzystają z niej użytkownicy), która jest wykonana, i to na tyle dobrze, że zwykle działa poprawnie, a klient nie ma funduszy/potrzeby żeby ją dalej rozwiajać.

minified - zmniejszenie rozmiaru pliku tak, aby zmniejszyć jego rozmiar. Zwykle wykonuje się tą operację dla plików CSS i JS. W obu przypadkach usuwany niepotrzebne znaki białe (spacje, tabulatory, znaki nowej linii. Javascript dodatkowo nazwy zmiennych, funkcji itp. zamieniane są na jak najkrótsze. Dzięki temu skrypt wciąż będzie działał dokładnie tak jak w pierwotnej formie, ale będzie zajmował 
preprocesor
endpoint -
wyjątek (ang. exception) -
500 (pięćsetka) - kod odpowiedzi requestu HTTP HTTP oznaczający błąd wykonywania kodu po stronie serwera. Może pojawić się, gdy np. programista
404 - not found - kod odpowiedzi requestu HTTP
200 - kod odpowiedzi requestu HTTP, który oznacza poprawne jego wykonanie
task - jest to zadanie do wykonania dla programisty. Może to być bugfix (najprawienie błędu), zrobienie ficzera (zrobinie nowej funkcjonalności) czy np. zrzucenie części danych z bazy do pliku .csv do analizy dla klienta.
polyfill
code review - ocena kodu. Proces polegający na przeglądnięciu zmian w kodzie wykonanych przez innego programistę. Wykonywany przez 1 lub więcej ludzi. W przypadku znalezienia błędu, możliwości lepszego zapisu kodu, znalezienia optymalizacji przeglądający kod może umieścić komentarz w kodzie (jeśli review przeprowadzony jest na pull requeście), lub rozmawiajac z autorem zmian.
pull request, PR - jest to przygotowany przez programistę zbiór zmian w kodzie, który dotyczy zwykle jednej funkcjanalności (typu implementacja logowania przez facebooka, poprawienie błędu czy usunięcie nieużywanych plików). Zawiera jeden lub wiele commitów. PR-a tworzymy nie w bezpośrednio w systemie kontroli wersji (lokalnie), ale na stronie hostingu kodu (np. github, bitbucket, gitlab). Pozwala na łatwe wyszukiwanozwalaie zmian w historii - wystarczy
commit - pojedyncza zmiana w kodzie, zapisana w systemie kontroli wersji. Może ona dotyczyć jednego lub wielu plików. Jeden commit powinien dotyczyć

cache (wym. 'kasz') - pamięć podręczna. Miejsce w którym umieszczane są dane, do które chcemy mieć szybszy dostęp. Np. cache bazy danych umieszcza część danych w RAM, do którego jest szybszy dostęp w porównaniu do standardowego miejsca przechowywania danych bazy danych (dysk twardy).
flaga - zmienna w kodzie, na podstawie której wykonujemy (lub nie wykonujemy) jakąś część kodu. Najprostszym rodzajem flagi jest zmienna binarna (o wartości 'true' lub 'false'). Na przykład mamy w funkcji skomplikowaną logikę biznesową. Chcemy wykonać zapis do pliku pod koniec tej funkcji, po występieniu konkretnych warunków. Możemy wtedy utworzyć flagę 'var saveToFile = false', w dalszym kodzie ustawiamy jej wartość na 'true' jeśli występią wspomniany warunkówi. Pod koniec kodu funkcji sprawdzamy wartość flagi, i zapisujemy plik jeśli ma ona wartość 'true'.
logika biznesowa - implementacja wymaganych rzeczy w aplikacji, według wizji jej właściciela (klienta); według specyfikacji. Np. klient wymaga, żeby wyliczyć statystyki za pomocą wymyślonego przez niego wzoru. W przypadku wystąpienia danych okoliczności (np. użytkownik aplikacji opłacił konto premium, jest konkretna pora dnia itp.) możliwa jest zmiana sposoby wyliczania statystyk. Logika prowadząca do wykonania tego typu rzeczy jest właśnie logiką biznesową.
mockup - zarys, koncept aplikacji lub jej części. Może być zrobiony w programie graficznym lub programie specjalnie do tego celu wykonanym; odręczy rysunek, prezentacja PowerPoint itp. Zwykle jako dodatek do opisu słownego, pozwala na pokazaniu developerowi jaki wygląd powinien zostać osiągnięty.
deployment - proces wysłania aplikacji na serwer produkcyjny lub stagingowy. W odróżnieniu od środowiska developerskiego, gdzie edytujemy kod bezpośrednio zmieniając zawartość plików i widzimy od razu zmiany na stronie po jej oświeżeniu w przegądarce, tu proces jest bardziej skomplikowany. Zwykle deployment wykonywany jest przez przeznaczone do tego oprogramowania/skrypt. Przykładowe elementy procesu deploymentu: utworzenie kopii obecnie działającej wersji kodu; zaciągnięcie najnowszego kodu z zewnętrznego repozytorium, np. z githuba; uruchomienie testów Continous Integration; zainstalowanie nowo dodanych bibliotek, przeprowanienie migracji bazy danych; restart serwera.
release - wypuszczenie kolejnej wersji oprogramowania na światło dzienne, na serwerze produkcyjnym. W zależności od przyjętej polityki releasowania dla danego projektu może być od przeprowadzony w dowolym czasie, lub np. raz na 2 tygodnie, lub po zebraniu się wystarczająco dużej ilości zmian.
breakpoint - w procesie debuggingu jest to oznaczenie danej linii kodu po to, żeby debugger zatrzymał działanie aplikacji tuż przed wykonaniem tej linii. Dzieki breakpointowi możemy stwierdzić czy uruchamia się dany fragment kodu. Zwykle programista ma możliwość analizy wartości zmiennych podczas pauzy breakpointa, dzięki czemy może uniknąć on np. żmudnego wyświetlania każdej zmiennej.


feedback - informacja zwrotna. Przykładem feedbacku może być implementacja danej funkcjonalości, i wystawienie jej na serwerze stagingowym, po to, żeby klient mógł sprawdzić, czy jest wszystko w porządku. Klient, jeśli implementacja nie jest dokładnie zgodna z tym co oczekuje powie/napisze ci np. 'trzeba poprawić kolor belki na jaśniejszy; walidacja pola X ma być wykonywana tylko jeśli użytkownik zaznaczył checkboxa A. Poza tym wszystko jest OK.' Tn komentarz jest feedbackiem dla ciebie.
edge case - skrajny przypadek. Jest to rzadki, bardzo odbiegający od zwykłych okoliczności przypadek, który np. powoduje nieprawidłowe działania aplikacji. Przykładem edge casa może być to, że użytkownik aplikacji posiada 110 eobiektów edycji dokumentu, a interfejs naszej aplikacji wyświetla tylko ich 100.
stack/stos (technologii)
vanilla (np. vanila JS)
protokół
skalowalność
brute force
