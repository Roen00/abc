Każda firma posiada różne podejście do zarządzania procesem tworzenia oprogramowania. Również wewnąrz jednej firmy może zdarzyć się tak, że dany zespół programistyczny w obrębie jednej firmy będzie miał inne podejście to tej sprawy. Może kłaść nacisk na inne aspekty procesu zarządzania członkami zespołu, lub np. pomijać całe sekcje 'domyślnego' postepowania. Obecnie jednak większość firm, zwłasza małych i średnich tworzy oprogramowanie przy użyciu metodyki Agile (zwinnej). Najpowszechnijszym rodzajem tego podejścia jest Scrum. Najkrócej rzecz ujmując sprowadza się ona do rozbicia czasu produkcji oprogramowania na krótkie interwały (najczęściej jednotygodniowe). Członkowie zespołu określają swoje cele do zrealizowania na nastepny tydzień; dodatkowo codziennie powienien odbyć się tzw. scrum meeting (standup) - krótkie spotkania na początku dnia, gdzie członkowie informują innych o swoich postępach i zamiarach na bierzący dzień. Scrum pozwala na skupieniu się na mniejszym wycinku przyszłości. Dodatkowo, dzięki częstej aktualizacji wiedzy na temat postępów prac nad poszczególnymy funkcjanolnościami manager może zainterweniować wcześniej, np. przez dołącznie kolejnej osoby do zespołu. Dla klienta również jest to bardzo dobre rozwiązanie, ponieważ otrzymuje testu i recenzji kolejną, wersję strony/aplikacji co tydzień lub częściej.

Planowanie

Planowanie w Scrum jest to proces, w którym członekowi zespołu wybierane są zadania do wykonania na następny tydzień (kolejny sprint). Dodatkowo te zadania powinny być oszacowane. Planowanie zwykle odbywa się w konkretym dniu, np. w poniedziałek rano. Członkowie zespołu siadają z managerem, lub inną osobą, która zarządza projektem. Korzystają oni z trackera zadań (PivotalTracker, Jira, Trello lub podobny), który zawira listę funkcjonalności, błędów, rzeczy do zrobienia. Lista zadań w trackerze jest zwykle tworzona przez klienta, lub tworzona jest przez mangera według wymagań klienta. Powinna być ona posortowana według priotytetu - najważniejsze, najpilniejsze zadania muszą być umieszczone wyżej niż te mniej istotne.

Mając listę zadań w trackerze przystępujemy do szacowania zadań. Jest to po prostu orientacyjne określenie ilości czasu w jakiej programista spodziewa się ukończyć zadanie. Siłą rzeczy nie może być ona bardzo dokładna. Celem szacowania jest stwierdzenie jaką ilość zadań z trackera programista może wykonać w sprincie na bierzący tydzień. Metryki szacowania zadania są różne. Przykładowo, tracker może posługiwać się punktami. Jeden punkt to ok. 2-3h pracy. Zatem gdy myślimy, że zadanie jest stosunkowo proste, możemy go oszacować na 1 lub 2 punkty. Bardziej złożnone ficzery wymagają większej ilości czasu, np. ok 2 dni pracy, co odpowiada 5-6 punktom. Oszacowane zadania zoastają przypisane do danej osoby, tzn. ta osoba będzie wykonywać to zadanie w sprincie. Szacujemy tyle zadań dla każdej osoby, aby suma ich punktów nie przekroczyła ilości punktów w tygodniu. Czyli zakładając 3 punkty na dzień (ok. 8h), dla 5 dni pracujących w tygodniu mamy 3*5 = 15 punktów, co oznacza że suma punktów poszczególnych zadań przypisanych dla nas nie może przekroczyć 15.

Powyższy akapit opisuje cały proces szacowania, jednak rolą junior developera jest jedynie określenie punktów (czasu) dla zadania. Resztą zajmuje się opiekun projektu, łącznie z przypisaniem zadań do danej osoby, czy dbanie o nie przekrocznie ilości punktów w sprincie dla danego członka.

W jaki sposób oszacować zadanie? Jeśli nie masz dużego doświadcznia w programowaniu może to być dosyć trudne, zwł. na początku. Prawdopodobnie manager lub inni programiści z zespołu pomogą ci z tym zadaniem, ponieważ oszacują go na podstawie swojego doświadczenia, którego ty jeszcze nie posiadasz. Jeśli mimo to musisz oszacować zadanie przeczytaj uważnie do dany task zawiera. Czasem w trackerze zadania mają wyszczególnione podzadania. Wykonanie ich wszystkich może być czasochłonne. Zadania, które brzmią prosto, nie wiążą się np. z użyciem nieznanej biblioteki, można oszacować nprawdopodobnie na 1 czy 2 punkty. Przykładowo, dodanie przycisku na interfejsie aplikacji, wraz z podpięciem do niego wykonania jakiejś akcji będzie można oszacować na taką ilość punktów. Z drugiej strony jednak zadnia rozbudowane, wymagające zrobienia researchu, tudzież zadania innego typu niż te, z jakimi mieliśmy wcześniej do czynienia będziemy szacować na większą ilość, np. 4 czy 6 punków. Przykładem takiego taska może być integracja z zewnętrzym serwisem, który jest mało popularny.

Biorąc pod uwagę twoje doświadczenie w programowaniu bezpieczniej jest zawyżyć nieco oszacowanie zadania (zob.: 'Hofstadter's law'). Czyli w głowie myślimy, że dany ficzer może zająć nam 5 godzin, to dodajemy margines, i szacujemy zadnie na 3 punkty (1 cały dzień). Nie jest to w żadnym przypadku oszukiwanie - po prostu nie masz na tyle doświadczenia, żeby dobrze wykonać oszacowanie, a dodatkowo podczas programowania mogą wystąpić dodatkowe problemy i komplikacje które i tak zwiększą czas na uporanie się z taskiem. A jeśli nawet zbyt mocno nadszacujesz lub niedoszacujesz zdanie, to manager czy inne osoby z zespołu mogą natychmiast poprawić twój osąd. W trakcie pracy nad poszczególnymi zadaniami będziesz widział, czy twoje szacunki się sprawdziły, czy nie. Na przykład jeśli w większości przypadków czas poświęcony na zadanie mieścił się w wartości "pomyślanej" przez ciebie, możesz w następnych planowaniach rezygnować z dodawania dodatkowych marginesów czasowych, bądź dodawać je w przypadku nietypowych tasków (gdzie istnieje duża szansa na to, że wystąpią komplikacje).

W przypadku, gdy jakieś zadanie nie zostaną wykonane w danym sprincie, będą one przesunięte do nastepnego. Bądą uwględnione przy kolejnym plaowaniu.

Standup

Jest to krótkie, poranne spotkanie wszystkich członków zespołu (z opiekunem projektu), gdzie każda z osób mówi co zrobiła w poprzednim dniu, i co zamierza wykonać w bierzącym dniu. Dzięki temu pozostali członkowie zespołu znają postęp innych, a opowiadająca osoba może lepiej zrozumieć nadchodzące zadania poprzez sam fakt wyartykułowania ich. Standup powinien trawać najwyżej 10 minut (15 w przypadku większych zespołów). Zwykle na stojąco - stąd nazwa.

Co i jak powiedzieć na standupie? Przede wszystkim nie można zbytnio rozwodzić się nas szczegółami tego co zrobiliśmy, lub tego, z czym mamy problem. Wystarczy zakomunikować problem, ale omawiać go należy już po spotkaniu, między developerami. Dzięki temu pozostali członkowie zespołu nie muszą stać, i tracić czas na wysłuchiwaniu szczegółów problemu (np. graficy wysłuchujący szczegółów problemu developerów Androida). Wypowiedź na standupie ma być krótka, kilkuzdaniowa. W żołnierskich słowach przekazane ma być to, co najistotniejsze. Warto w głowie ułożyć sobie plan wypowiedzi, oraz przypomnieć sobie nad czym pracowaliśmy poprzedniego dnia, i taski na dziś. Przykładowa wypowiedź na scrum meetingu: 'Wczoraj zaimplementowałem sekcję widoku statystyk użytkowników dla admina, według mockupów przygotowanych przez Krzyśka. Dodatkowo zacząłem debugować problem ze znikającymi powiadomieniami dla użytkowników. W logach znalazłem bardzo dziwne wpisy, których nie umiałem zinterpretować, ale to przegadam z Maciejem po standupie. Na dziś mam zamiar uporać się tym bugiem, zmienić layout dla niezalogowanego użytkownika, oraz - jak zastanie mi trochę czasu - myślę zacząć poszukiwania jakiejś dobrej biblioteki do konwersji plików graficznych, którą musimy wprowadzić, bo klient tego wymaga.'.

Praca z trackerem
