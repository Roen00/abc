Dlaczego warto umieć obsługiwać vima?

Przede wszystkim dlatego, że backend/full-stack developerowi zdarza się wykonywać jakieś czynności na zewnętrzym serwerze. Przykładem może być zmiana konfiguracji Apache na serwerze produkcyjnym, albo potrzeba modyfikacji jednorazowego skryptu na serwerze stagingowym. Zwykle w takich przypadkach developer łączy się z serwerem przez ssh, i w trybie 'konsolowym' (bez środowiska graficznego) modyfikuje dany plik. Standardowym edytorem na serwerach (zwł. tych działających pod Linuksem) jest właśnie vim (lub jego starsza wersja, vi). Jeśli nie ma innego edytora (Emacs, nano itp.), i nie mamy uprawnień do zainstalowania własnego edytora to jesteśmy skazani na używanie właśnie vima.

Vim bardzo sprawnie obsługuje nawet duże pliki, zatem chcąc edytować np. 2GB plik vim jest doskonałym wyborem. Vim posiada olbrzymią ilość wtyczek, systemów kolorowania i wyrównywania składni dla różnych języków programowania.

Jeśli chcemy ograniczyć sie tylko do wspomnianego wyżej przypadku, to ilość potrzebnych umiejętności nie jest duża. Możemy ograniczyć się do poniższych:

Otwieranie/zamykanie:

- otwieranie pliku: vim plik.c
- zapisywanie zmian w pliku: :w
- zapisywanie zmian w pliku i zamknięcie edytora: :wq
- zamknięcie pliku/edytora: :q
- anulowanie zmian w pliku i zamknięcie edytora: :q!

Poruszanie się po pliku (tryb normalny):

- wyszukiwanie słowa w pliku: /slowo<ENTER>
- kolejne/poprzednie wystąpienie wyszukanego słowa: n oraz p
- wyszukanie słowa/frazy w pliku i zamiana na inne słowo/frazę: :%s/fraza/nowa fraza/g
- poruszanie się po pliku w trybie normalnym (góra, dół, lewo, prawo): k, j, h, l
- poruszanie się słowo w przód i słowo w tył: w oraz b
- przeniesienie kursora na początek i koniec bierzącej linii: 0 oraz $ (^ to początek tekstu w linii)

Edycja (tryb edycji):

- wyjście z trybu edycji: <ESC>
- edycja w miejscu obecnego położenia kursora: i
- edycja 1 znak za kursorem: a
- edycja na początku i końcu bierzącej linii: I oraz A
- edycja znaku pod kursorem: r
- edycja 1 znaku, wyrazu w lewo, prawo): ch, cl, cb, cw
- edycja tekstu wewnątrz nawiasów (), <> itp.: ci(, ci< itp.
- edycja do początku/końca słowa: cb, cw
- edycja całego słowa: caw
- edycja bierzącej linii: cc
- edycja do danego znaku, np. edycja do znaku 'k', w tył i przód: cTk, ctk
- usunięcie bierzącej linii: dd
- usunięcie 1 znaku, wyrazu w lewo, prawo): dh, dl, db, dw
- usunięcie tekstu wewnątrz nawiasów (), <> itp.: di(, di< itp.

Zaznaczanie tekstu (tryb wizualny):
- wejście w tryb zaznaczania: v
- wejście w tryb zaznaczania blokowego: <CTRL>v
- wyjście z trybu zaznaczania: <ESC>
- zaznaczanie tekstu: komendy takie jak w trybie normalnym, po uprzednim wejściu w tryb zaznaczania
- zanaczanie całych linii: <SHIFT>v i klawisze kierunków góra/dół (k/j)
- zaznaczenie tekstu wewnątrz nawiasów (), <> itp.: vi(, vi< itp.

Można zauważyć, że vim posiada swoisty własny język, w którym sporo komend jest oparte na zazadzie "operator + kierunek zmian". Można można spostrzec analogie, np. zaznaczenie wewnątrz nawiasów i edycja wewnątrz nawiasów: vi( oraz ci(.

Aby ułatwić zapamiętanie klawiszy można tłumaczyć je w ten sposób:

- :w write, :wq write quit, :q quit
- n/p next/previous
- :%s... substitute
- hjkl klawisze są w rzędzie, h i l skrajne lewy i prawy. j przypomina strzałkę w dół
- w/b word/back
- ^$ występują w wyrażeniach regularnych jako początek i koniec tekstu
- i insert, a append, r replace
- c change, cb change back itp., ci( change inside (, caw change a word
- ctk change till k
- db, dw delete back, delete word
- di( delete inside (
- v visual, vi( visual inside (

Vima możemy używać też jako główny edytor w trakcie programowania, zamiast IDE. Jednak z powodu wysokiego progu wejścia w ten edytor, ze względu na potrzeby czas na jego konfigurację i naukę prawdopodobnie lepiej będzie zacząć przygodę z programowaniem od innego edytora, np. SublimeText 2, i ewentulanie w międzyczasie doszkalać się z vima.

Warto przestrzegać kilku zasad, dzięki którym przyswojenie Vima jako główny edytor będzie łatwiejszy. Nie kopiuj gotowych plików konfiguracji (vimrc). Zacznij od prostej konfiguracji, np. takiej jak tu: http://mislav.net/2011/12/vim-revisited/. Powinieneś wiedzieć co robi każda linia w twoim vimrc. Nie instaluj dużej ilości rozszerzeń. Zainstaluj jedno, naucz się go używać, i po jakimś czasie możesz myśleć nad dodaniem następnego. Nieużywane pluginy usuń.
